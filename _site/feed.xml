<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/git//feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/git//" rel="alternate" type="text/html" /><updated>2017-05-03T23:19:01+02:00</updated><id>http://localhost:4000/git//</id><title type="html">Aprendiendo GIT</title><subtitle>Espacio colaborativo para dejar constancia de lo que vamos aprendiendo de forma colaborativa sobre este software.
</subtitle><entry><title type="html">Tipos Fusiones Git</title><link href="http://localhost:4000/git//2017/05/03/tipos-fusiones-git.html" rel="alternate" type="text/html" title="Tipos Fusiones Git" /><published>2017-05-03T00:00:00+02:00</published><updated>2017-05-03T00:00:00+02:00</updated><id>http://localhost:4000/git//2017/05/03/tipos-fusiones-git</id><content type="html" xml:base="http://localhost:4000/git//2017/05/03/tipos-fusiones-git.html">&lt;h1 id=&quot;fusiones--en-git-merge-y-rebase&quot;&gt;Fusiones  en Git: Merge y Rebase&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Introducción&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cuando un usuario utiliza Git, tarde o temprano, debera utilizar ramas, que son un conjunto de commit en una línea de tiempo.&lt;/p&gt;

&lt;p&gt;El esquema clásico de desarrollo con ramas en un repositorio de &lt;em&gt;Git&lt;/em&gt;, es tener una rama principal, denominada &lt;em&gt;master&lt;/em&gt;, donde tendremos código de forma estable, y conjunto de ramas con diferentes nombre como &lt;em&gt;desarrollo&lt;/em&gt; o &lt;em&gt;hostfix&lt;/em&gt;, que se utilizaran para el desarrollo de código.&lt;/p&gt;

&lt;p&gt;En algún momento debemos unir las ramas. ya sea entre varias ramas de &lt;em&gt;desarrollo&lt;/em&gt; o de una rama &lt;em&gt;desarrollo&lt;/em&gt; con la rama &lt;em&gt;master&lt;/em&gt;. Este proceso se denomina  fusión o &lt;em&gt;merge&lt;/em&gt;. Que consistira en mover un conjunto de &lt;em&gt;commit&lt;/em&gt; desde una rama a otra.&lt;/p&gt;

&lt;p&gt;Existen varios formas de hacer de fusionar dos ramas, el resultado será el mismo. La diferencia sera en como lo hace.&lt;/p&gt;

&lt;p&gt;Principalmente tendremos dos formas de realizar fusionar ramas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merge&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tenemos dos ramas, por ejemplo rama &lt;em&gt;master&lt;/em&gt; y &lt;em&gt;desarrollo&lt;/em&gt;, queremos fusionar la rama desarrollo sobre la rama &lt;em&gt;master&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../imgs/20170502-165541.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos situamos en la rama hacia donde se dirige la fusión, en este caso la rama_master_, y realizamos el &lt;em&gt;merge&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	git checkout master
	git merge desarrollo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Esta fusión realiza una “mezcla” , genera un nuevo &lt;em&gt;commit&lt;/em&gt; con el contenido de la rama &lt;em&gt;desarrollo&lt;/em&gt; en la rama &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/home/pepe/Descargas/Blog/AprendiendoGit/imgs/merge2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora podemos borrar las rama &lt;em&gt;desarrollo&lt;/em&gt; o seguir utilizandola para seguir desarrollando código.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rebase&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Es el otro tipo de fusión con un funcionamiento diferente, aunque tiene el mismo resultado. Este tipo de fusión lo que realiza es reorganización de los commits.&lt;/p&gt;

&lt;p&gt;Por ejemploi, tenemos las dos ramas del ejemplo anterior, &lt;em&gt;master&lt;/em&gt; y &lt;em&gt;desarrollo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/20170503-012232.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Realizamos el  mismo proceso anterior, fusionar  la rama &lt;em&gt;desarrollo&lt;/em&gt; en la rama &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Cuando ejecutamos un &lt;em&gt;rebase&lt;/em&gt;, nos debemos situar en la rama que vamos a fusionar, al contrario que ocurria con el &lt;em&gt;merge&lt;/em&gt;. Y ejecutamos.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout desarrollo
git rebase master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Este comando mueve todos los commit de la rama &lt;em&gt;desarrollo&lt;/em&gt; a continuación de la rama &lt;em&gt;master&lt;/em&gt;, el resultado sería.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/20170503-012728.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El resultado es  un historial de commit mas limpio.&lt;/p&gt;

&lt;p&gt;En el proceso de reorganización, a los commits se le ha asignado un nuevo identificador (hash). En algunos escenario, repositorios públicos, no es aconsejable utilizar &lt;em&gt;rebase&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;Cuando realizas un &lt;em&gt;push&lt;/em&gt; descargas commits a tu repositorio local, si realizas un &lt;em&gt;rebase&lt;/em&gt;, modificas los id de los commit, si realizas un &lt;em&gt;pull&lt;/em&gt; estos commits, con sus identificadores cambiados, se subiran al repositorio público. Si  otro desarrollador realiza un &lt;em&gt;pull&lt;/em&gt;, obtendra un conjunto de commit con los id cambiado, que se integraran en su repositorio local y provocara muchos dolores de cabeza.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rebase interactivo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Es una opción de &lt;em&gt;Rebase&lt;/em&gt; y permite realizar la reorganización de una forma manual. Continuando con el ejemplo anterior, si ejecutamos.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase -i desarrollo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Se nos abrira el editor que tenga configurado Git, por defecto vi, mostrando todos los commit de la rama desarrollo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/20170503-161445.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la parte superior veremos los &lt;em&gt;commit&lt;/em&gt; con sus identificadores, y una opción que indica la acción que vamos a realizar sobre ese &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Entre las acciones que podemos realizar tenemos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;pick&lt;/strong&gt;: Sin modificación , no realizamos acción sobre ese commit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;squash&lt;/strong&gt;: Permite unir &lt;em&gt;commits&lt;/em&gt;, el seleccionado con el anterior. El &lt;em&gt;commit&lt;/em&gt; debera tener un nuevo mensaje.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;fixup&lt;/strong&gt;: Permite unir &lt;em&gt;commit&lt;/em&gt;, utilizando el mensaje del primero.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;edit&lt;/strong&gt;: Para editar el mensaje del &lt;em&gt;commit&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;drop&lt;/strong&gt;: Borra un commit, también eliminado la línea directamente.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;exec&lt;/strong&gt;: Permite ejecutar un comando usando shell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También podemos escoger un conjunto de commit, no toda la rama, para reorganizar. Como ejemplo.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase -i master~3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Selecciona los útimos 3 commits de la rama &lt;em&gt;master&lt;/em&gt; para reorganizar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusión&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Normalmente se usa &lt;em&gt;merge&lt;/em&gt; para fusionar dos ramas, pero el comando &lt;em&gt;rebase&lt;/em&gt; debido a su limitación de no usarse en repositorios públicos, no es tan común, aunque tiene su utilidad para dejar un historial mas limpio.&lt;/p&gt;

&lt;p&gt;El comando &lt;em&gt;rebase&lt;/em&gt; interactivo es muy útil para limpiar aquellos &lt;em&gt;commit&lt;/em&gt; que no aportan valor al historial, se pueden unir con otros, modificar su mensaje. Es un comando muy útil para que el historial de una rama sera mas comprensible.&lt;/p&gt;</content><author><name></name></author><summary type="html">Fusiones en Git: Merge y Rebase</summary></entry><entry><title type="html">02 Configurar entorno local para trabajar con Github</title><link href="http://localhost:4000/git//2017/05/01/configurar-entorno-para-trabajar-con-github.html" rel="alternate" type="text/html" title="02 Configurar entorno local para trabajar con Github" /><published>2017-05-01T13:47:00+02:00</published><updated>2017-05-01T13:47:00+02:00</updated><id>http://localhost:4000/git//2017/05/01/configurar-entorno-para-trabajar-con-github</id><content type="html" xml:base="http://localhost:4000/git//2017/05/01/configurar-entorno-para-trabajar-con-github.html">&lt;h1 id=&quot;01-generar-claves-ssh&quot;&gt;01 Generar claves SSH&lt;/h1&gt;

&lt;p&gt;Comprueba si tienes alguna &lt;strong&gt;clave SSH&lt;/strong&gt; generada:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Las claves SSH se guardan en pares (una clave privada y una pública). Las dos deben tener el mismo nombre, solo que la pública debe acabar en &lt;code class=&quot;highlighter-rouge&quot;&gt;.pub&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Si al ejecutar el comando anterior compruebas que ya tienes una clave creada, puedes saltarte lo que queda de esta sección y pasar a añadir dicha clave a tu cuenta de Github.&lt;/p&gt;

&lt;p&gt;Si no tienes alguna clave creada puedes crear una ejecutando este comando:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;En este momento te pedirá una serie de datos, que puedes omitir para que tome unos valores por defecto si pulsas &lt;code class=&quot;highlighter-rouge&quot;&gt;enter&lt;/code&gt; en cada pregunta.&lt;/p&gt;

&lt;p&gt;Para comprobar que las claves se han generado correctamente vuele a ejecutar:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;o si has guardado las claves en otro directorio:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l /path/directorio/claves
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;y podrás ver los dos ficheros de las claves.&lt;/p&gt;

&lt;h1 id=&quot;02-asignar-las-claves-ssh-a-tu-cuenta-de-github&quot;&gt;02 Asignar las claves SSH a tu cuenta de Github&lt;/h1&gt;

&lt;p&gt;Accede a tu cuenta de Github y entra en la configuracción (settings)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/git//img/02-01-seleccionar-settings.png&quot; alt=&quot;Accede a settings&quot; title=&quot;accede a settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En el menú de la izquierda, entra en &lt;code class=&quot;highlighter-rouge&quot;&gt;SSH and GPG keys&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/git//img/02-02-seleccionar-ssh-and-gpg-keys.png&quot; alt=&quot;Accede a SSH and GPG keys&quot; title=&quot;Accede a SSH and GPG keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora pulsa sobre &lt;code class=&quot;highlighter-rouge&quot;&gt;New SSH key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/git//img/02-03-click-on-new-ssh-key.png&quot; alt=&quot;Click en New SSH key&quot; title=&quot;Click en New SSH key&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En el formulario que se te ha abierto, escribe un título para la clave, y en el apartado &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; tienes que pegar el contenido del fichero &lt;code class=&quot;highlighter-rouge&quot;&gt;.pub&lt;/code&gt; que generaste en el apartado anterior. Para ello puedes abrir el fichero con cualquier editor de texto y copiar el contenido.&lt;/p&gt;

&lt;p&gt;Pulsa sobre &lt;code class=&quot;highlighter-rouge&quot;&gt;Add SSH key&lt;/code&gt; y ya está todo hecho.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/git//img/02-04-copy-and-paste-public-key.png&quot; alt=&quot;Pulsa en add SSH key&quot; title=&quot;Pulsa en add SSH key&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;03-comprobar-que-la-operación-se-ha-realizado-bien&quot;&gt;03 Comprobar que la operación se ha realizado bien&lt;/h1&gt;

&lt;p&gt;Ejecuta el siguiente comando desde la terminal&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;y como respuesta te debe salir algo similar a ésto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/git//img/02-05-comando-realizado-correctamente.png&quot; alt=&quot;Respuesta comando de comprobacion&quot; title=&quot;Respuesta comando de comprobacion&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;04-configurar-nombre-y-correo&quot;&gt;04 Configurar nombre y correo&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;John Doe&quot;

$ git config --global user.email johndoe@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;05-guardar-contraseña-en-local&quot;&gt;05 Guardar contraseña en local&lt;/h1&gt;

&lt;p&gt;Para que no nos pida contraseña cada vez que enviamos cambios a GitHub:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La contraseña del repositorio remoto queda almacenada en el fichero &lt;code class=&quot;highlighter-rouge&quot;&gt;.git-credentials&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Si no queremos que quede guardada:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global credential.helper 'cache --timeout=3600'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Cuando transcurra una hora nos volverá a pedir la contraseña.&lt;/p&gt;</content><author><name></name></author><summary type="html">01 Generar claves SSH</summary></entry><entry><title type="html">01 Concepto</title><link href="http://localhost:4000/git//2017/04/30/definicion.html" rel="alternate" type="text/html" title="01 Concepto" /><published>2017-04-30T16:34:25+02:00</published><updated>2017-04-30T16:34:25+02:00</updated><id>http://localhost:4000/git//2017/04/30/definicion</id><content type="html" xml:base="http://localhost:4000/git//2017/04/30/definicion.html">&lt;h1 id=&quot;00-definición&quot;&gt;00 Definición&lt;/h1&gt;

&lt;p&gt;Se llama &lt;strong&gt;control de versiones&lt;/strong&gt; a la gestión de los diversos cambios que se realizan sobre los elementos de algún producto o una configuración del mismo. Una versión, revisión o edición de un producto, es el estado en el que se encuentra el mismo en un momento dado de su desarrollo o modificación.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; es un software de control de versiones diseñado por &lt;em&gt;Linus Torvalds&lt;/em&gt; , pensando en la eficiencia y la confiabilidad del mantenimiento de versiones de aplicaciones cuando éstas tienen un gran número de archivos de código fuente.&lt;/p&gt;

&lt;h1 id=&quot;01-características&quot;&gt;01 Características&lt;/h1&gt;

&lt;p&gt;Un sistema de versiones debe proporcionar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un mecanismo de almacenamiento&lt;/li&gt;
  &lt;li&gt;Posibilidad de realizar cambios&lt;/li&gt;
  &lt;li&gt;Registro histórico&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Terminología:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;repositorio&lt;/strong&gt;: lugar en el que se almacenan los datos actualizados e históricos de cambios, a menudo en un servidor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;módulo&lt;/strong&gt;: conjunto de directorios y/o archivos dentro del repositorio que pertenecen a un proyecto común.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;version&lt;/strong&gt;: revisión determinada de la información que se gestiona.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;: etiqueta con el fin de clasificar el contenido para encontrarlo más rápidamente.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;baseline&lt;/strong&gt;: línea base, revisión aprobada de un documento o fichero fuente, a partir del cual se pueden realizar los cambios siguientes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;branch&lt;/strong&gt;: rama o bifurcación en un instante de tiempo determinado la cual se desarrolla de forma independiente.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;merge&lt;/strong&gt;: mezcla de ramas de código desarrollado con diferencias.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;checkout&lt;/strong&gt;: despliegue, suele utilizarse para crear ramas nuevas.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;conflicto&lt;/strong&gt;: ocurre cuando hay diferencias entre los archivos y el sistema no está programado para decidir qué parte del código debe dar por bueno.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;resolver&lt;/strong&gt;: intervención manual para solucionar un conflicto.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;changuelist&lt;/strong&gt;: lista de cambios&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;export&lt;/strong&gt;: similar a &lt;em&gt;checkout&lt;/em&gt;. Crea un árbo de directorios limplio sni metadatos de control de versiones presentes en la copia de trabajo, que se encuentran en el directorio &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;import&lt;/strong&gt;: acción de copia de un árbol de directorios local en el repositorio por primera vez.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;integración&lt;/strong&gt;: puede ser por &lt;em&gt;fusión&lt;/em&gt; o &lt;em&gt;merge&lt;/em&gt; o por &lt;em&gt;integración inversa&lt;/em&gt; para fundir ramas diferentes en el tronco o &lt;em&gt;trunk&lt;/em&gt; principal.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sync&lt;/strong&gt;: actualización.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;workspace&lt;/strong&gt;: copia local de los ficheros de un repositorio. Conceptualmente es un &lt;em&gt;cajón de arena&lt;/em&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;sandbox&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;congelar&lt;/strong&gt;: permitir los últimos commits para resolver buggs y suspender cualquier otro antes de la entrega.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;02-formas-de-colaborar&quot;&gt;02 Formas de colaborar&lt;/h1&gt;

&lt;p&gt;Para colaborar debemos &lt;strong&gt;clonar&lt;/strong&gt; el repositorio ya creado para disponer de una &lt;strong&gt;copia local&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;1-de-forma-exclusiva&quot;&gt;1 De forma exclusiva&lt;/h3&gt;

&lt;p&gt;Esquema para poder realizar un cmbio en el que es necesario comunicar al repositorio el elemento que se desea modificar y el sistema se encargará de impedir que otro usuario pueda modificar dicho elemento. Una vez hecha la modificación se comparte al resto de colaboradores.&lt;/p&gt;

&lt;h3 id=&quot;2-de-forma-colaborativa&quot;&gt;2 De forma colaborativa&lt;/h3&gt;

&lt;p&gt;Esquema en el que cada usuario modifica la copia local y cuendo el usuario decide compartir los cambios el sistema automáticamente intenta combinar las diversas modificaciones.&lt;/p&gt;

&lt;p&gt;Suelen aparecer conflictos e inconsistencias que se deben solucionar de forma manual.&lt;/p&gt;

&lt;h1 id=&quot;03-arquitecturas-de-almacenamiento&quot;&gt;03 Arquitecturas de almacenamiento&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Distribuidos&lt;/strong&gt;: cada usuario tiene su propio repositorio. Los repositorios puede intercambiar y mezclar revisiones. Es frecuente el uso de un repositorio en un servidor contra el que se sincronizan las copias locales.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Centralizados&lt;/strong&gt;: existe un repositorio centralizado de todo el código, del cual es responsable un único usuario (o conjunto de ellos) Se facilitan las tareas administrativas a cambio de reducir flexibilidad, pues todas las decisiones fuertes, como crear una nueva rama, necesitan la aprobación del responsable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;04-tipos-de-ramas&quot;&gt;04 Tipos de ramas&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Master&lt;/strong&gt;: rama principal. Contiene el repositorio principal en producción, por lo que debe estar estable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Development&lt;/strong&gt;: rama sacada de master. Es la rama de integración, todas las nuevas funcionalidades se deben integrar en esta rama. Cuando se realicen las integraciones y se corrijan los errores se mezclará con la rama &lt;em&gt;master&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: cada nueva funcionalidad se debe realizar en una rama nueva, especificada para esa funcionalidad. Se deben sacar de la rama &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hotfix&lt;/strong&gt;: los bugs que surgen en producción, por lo general se deben arreglar y publicar de forma urgente. Se sacan de la rama &lt;em&gt;master&lt;/em&gt;. Una vez corregido el error se mezcal sobre la rama &lt;em&gt;master&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">00 Definición</summary></entry><entry><title type="html">00 Bienvenidos</title><link href="http://localhost:4000/git//git/2017/04/29/welcome-to-jekyll.html" rel="alternate" type="text/html" title="00 Bienvenidos" /><published>2017-04-29T20:42:10+02:00</published><updated>2017-04-29T20:42:10+02:00</updated><id>http://localhost:4000/git//git/2017/04/29/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/git//git/2017/04/29/welcome-to-jekyll.html">&lt;p&gt;Bienvenidos al blog coloborativo sobre GIT.&lt;/p&gt;

&lt;p&gt;En este espacio podemo recopilar el aprendizaje colaborativo sobre esta plataforma.&lt;/p&gt;

&lt;p&gt;Si quieres colaborar, puedes ponerte en contacto con nosotros.&lt;/p&gt;

&lt;p&gt;Puedes revisar &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; para aprender a editar este blog.&lt;/p&gt;</content><author><name></name></author><summary type="html">Bienvenidos al blog coloborativo sobre GIT.</summary></entry></feed>